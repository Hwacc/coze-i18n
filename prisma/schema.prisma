// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN @map("ADMIN")
  USER  @map("USER")
  GUEST @map("GUEST")
}

model User {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  username    String    @unique
  nickname    String?
  email       String?
  password    String
  role        UserRole  @default(USER)
  ownProjects Project[] @relation(name: "ProjectOwner")
  projects    Project[]

  @@unique([username, id])
}

model Project {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  name          String
  description   String?
  pages         Page[]
  owner         User     @relation(name: "ProjectOwner", fields: [ownerUsername, ownerID], references: [username, id])
  ownerUsername String   @map("owner_username")
  ownerID       Int      @map("owner_id")
  users         User[]
}

model Page {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  image     String?
  project   Project? @relation(fields: [projectID], references: [id])
  projectID Int?     @map("project_id")
  tags      Tag[]
}

model Tag {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  x             Float
  y             Float
  width         Float
  height        Float
  editable      Boolean
  className     String       @map("class_name")
  fill          String
  stroke        String
  i18nKey       String?      @unique @map("i18n_key")
  content       String?
  page          Page         @relation(fields: [pageID], references: [id])
  pageID        Int          @map("page_id")
  translation   Translation? @relation(fields: [translationID], references: [id])
  translationID Int?         @map("translation_id")
}

model Translation {
  id        Int      @id @default(autoincrement())
  i18nKey   String   @unique @map("i18n_key")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  origin    String
  en        String
  zh        String
  tags      Tag[]
}
