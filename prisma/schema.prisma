generator client {
  provider     = "prisma-client-js"
  output       = env("DATABASE_CLIENT")
  moduleFormat = "esm"
  runtime      = "nodejs"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  username       String           @unique
  nickname       String?
  email          String?
  password       String
  role           String           @default("USER")
  avatar         String?
  ownProjects    Project[]        @relation("ProjectOwner")
  translationLog TranslationLog[]
  projects       UserProject[]

  @@unique([username, id])
}

model Project {
  id            Int              @id @default(autoincrement())
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  name          String
  description   String?
  ownerUsername String           @map("owner_username")
  ownerID       Int              @map("owner_id")
  pages         Page[]
  owner         User             @relation("ProjectOwner", fields: [ownerUsername, ownerID], references: [username, id])
  settings      ProjectSettings?
  users         UserProject[]
}

model ProjectSettings {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  projectID   Int      @unique @map("project_id")
  ocrLanguage String   @map("ocr_language")
  ocrEngine   Int      @map("ocr_engine")
  prompt      String?  @default("")
  project     Project  @relation(fields: [projectID], references: [id], onDelete: Cascade)
}

model UserProject {
  userID    Int     @map("user_id")
  projectID Int     @map("project_id")
  project   Project @relation(fields: [projectID], references: [id])
  user      User    @relation(fields: [userID], references: [id])

  @@id([userID, projectID])
}

model Page {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  name      String
  image     String?
  projectID Int?          @map("project_id")
  project   Project?      @relation(fields: [projectID], references: [id], onDelete: Cascade)
  settings  PageSettings?
  tags      Tag[]
}

model PageSettings {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  pageID      Int      @unique @map("page_id")
  ocrLanguage String   @map("ocr_language")
  ocrEngine   Int      @map("ocr_engine")
  prompt      String?  @default("")
  page        Page     @relation(fields: [pageID], references: [id], onDelete: Cascade)
}

model Tag {
  id            Int          @id @default(autoincrement())
  tagID         String       @map("tag_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  x             Float
  y             Float
  width         Float
  height        Float
  className     String       @map("class_name")
  pageID        Int          @map("page_id")
  translationID Int?         @map("translation_id")
  i18nKey       String?      @map("i18n_key")
  translation   Translation? @relation(fields: [translationID], references: [id])
  page          Page         @relation(fields: [pageID], references: [id], onDelete: Cascade)
  settings      TagSettings?
}

model TagSettings {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  tagID      Int      @unique @map("tag_id")
  tag        Tag      @relation(fields: [tagID], references: [id], onDelete: Cascade)
  locked     Boolean  @default(false)
  style      Json
  labelStyle Json     @map("label_style")
  prompt     String?  @default("")
}

model Translation {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  origin      String
  fingerprint String            @unique
  tags        Tag[]
  logs        TranslationLog[]
  react       TranslationReact?
  vue         TranslationVue?

  @@index([fingerprint])
}

model TranslationVue {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  en            String?
  zh_cn         String?
  zh_tw         String?
  ja            String?
  ko            String?
  ru            String?
  fr            String?
  de            String?
  es            String?
  pt            String?
  translationID Int         @unique @map("translation_id")
  translation   Translation @relation(fields: [translationID], references: [id], onDelete: Cascade)
}

model TranslationReact {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  en            String?
  zh_cn         String?
  zh_tw         String?
  ja            String?
  ko            String?
  ru            String?
  fr            String?
  de            String?
  es            String?
  pt            String?
  translationID Int         @unique @map("translation_id")
  translation   Translation @relation(fields: [translationID], references: [id], onDelete: Cascade)
}

model TranslationLog {
  id          Int          @id @default(autoincrement())
  origin      String
  action      String
  status      String
  createdAt   DateTime     @default(now()) @map("created_at")
  userID      Int?         @map("user_id")
  fingerprint String?
  translation Translation? @relation(fields: [fingerprint], references: [fingerprint])
  user        User?        @relation(fields: [userID], references: [id])
}

model Translation_FTS {
  origin String?

  @@ignore
}
