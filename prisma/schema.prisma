// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN @map("ADMIN")
  USER  @map("USER")
  GUEST @map("GUEST")
}

model User {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  username       String           @unique
  nickname       String?
  email          String?
  avatar         String?
  password       String
  role           UserRole         @default(USER)
  ownProjects    Project[]        @relation(name: "ProjectOwner")
  projects       UserProject[]
  translationLog TranslationLog[]

  @@unique([username, id])
}

model Project {
  id            Int              @id @default(autoincrement())
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  name          String
  description   String?
  pages         Page[]
  owner         User             @relation(name: "ProjectOwner", fields: [ownerUsername, ownerID], references: [username, id])
  ownerUsername String           @map("owner_username")
  ownerID       Int              @map("owner_id")
  users         UserProject[]
  settings      ProjectSettings?
}

model ProjectSettings {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  project     Project  @relation(fields: [projectID], references: [id], onDelete: Cascade)
  projectID   Int      @map("project_id")
  ocrLanguage String   @map("ocr_language")
  ocrEngine   Int      @map("ocr_engine")

  @@unique([projectID])
}

model UserProject {
  user      User    @relation(fields: [userID], references: [id])
  project   Project @relation(fields: [projectID], references: [id])
  userID    Int     @map("user_id")
  projectID Int     @map("project_id")

  @@id([userID, projectID])
}

model Page {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  name      String
  image     String?
  project   Project?      @relation(fields: [projectID], references: [id], onDelete: Cascade)
  projectID Int?          @map("project_id")
  tags      Tag[]
  settings  PageSettings?
}

model PageSettings {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  page        Page     @relation(fields: [pageID], references: [id], onDelete: Cascade)
  pageID      Int      @map("page_id")
  ocrLanguage String   @map("ocr_language")
  ocrEngine   Int      @map("ocr_engine")

  @@unique([pageID])
}

model Tag {
  id            Int          @id @default(autoincrement())
  tagID         String       @map("tag_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  x             Float
  y             Float
  width         Float
  height        Float
  className     String       @map("class_name")
  locked        Boolean      @default(false)
  style         Json
  page          Page         @relation(fields: [pageID], references: [id], onDelete: Cascade)
  pageID        Int          @map("page_id")
  translation   Translation? @relation(fields: [translationID], references: [id])
  translationID Int?         @map("translation_id")
  i18nKey       String?      @map("i18n_key")
}

model Translation {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  origin      String
  fingerprint String           @unique
  tags        Tag[]
  logs        TranslationLog[]

  vue   TranslationVue?
  react TranslationReact?

  @@index([fingerprint])
}

model TranslationVue {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  en        String?
  zh_cn     String?
  zh_tw     String?
  ja        String?
  ko        String?
  ru        String?
  fr        String?
  de        String?
  es        String?
  pt        String?

  translation   Translation @relation(fields: [translationID], references: [id], onDelete: Cascade)
  translationID Int         @unique @map("translation_id")
}

model TranslationReact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  en        String?
  zh_cn     String?
  zh_tw     String?
  ja        String?
  ko        String?
  ru        String?
  fr        String?
  de        String?
  es        String?
  pt        String?

  translation   Translation @relation(fields: [translationID], references: [id], onDelete: Cascade)
  translationID Int         @unique @map("translation_id")
}

enum TranslationLogAction {
  INSERT       @map("INSERT")
  UPDATE       @map("UPDATE")
  DELETE       @map("DELETE")
  FORCE_INSERT @map("FORCE_INSERT")
}

enum TranslationLogStatus {
  SUCCESS @map("SUCCESS")
  FAILED  @map("FAILED")
  REFUSED @map("REFUSED")
  ERROR   @map("ERROR")
}

model TranslationLog {
  id        Int                  @id @default(autoincrement())
  origin    String
  action    TranslationLogAction
  status    TranslationLogStatus
  createdAt DateTime             @default(now()) @map("created_at")

  userID Int?  @map("user_id")
  user   User? @relation(fields: [userID], references: [id], onDelete: SetNull)

  fingerprint String?
  translation Translation? @relation(fields: [fingerprint], references: [fingerprint], onDelete: SetNull)
}
